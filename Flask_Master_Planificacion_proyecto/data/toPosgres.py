import json
import psycopg2
import os
import configparser

from sqlalchemy import false



def dir_path():
    dir_path = os.path.dirname(os.path.realpath(__file__))

    b=str(dir_path)
    string="abcdefghijklmnñopqrstuvwxyzABCDEFGHIJKLMÑOPQRSTUVWQYZ,.1234567890-_:"
    dir_addres=f''''''
    for x in b:
        if(x in string):
            dir_addres+=x
        else:
            dir_addres+=f'//'
    e=f'{dir_addres}//config.ini'
    return e

def tabla_existe(tabla):
    config = configparser.ConfigParser()
    e=dir_path()
    config.read(e)   

    #bd connection
    bd_user = config['db']['user']
    bd_password = config['db']['password']
    bd_host=config['db']['host']
    bd_port=config['db']['port']
    bd_database=config['db']['database']

    try:    
        connection = psycopg2.connect(
            user = bd_user,
            password = bd_password,
            host = bd_host,
            port = bd_port,
            database = bd_database
            )
        
        cursor = connection.cursor()         

        sqlstring ='''SELECT EXISTS (
        SELECT 1
        FROM pg_tables
        WHERE schemaname = 'public' AND tablename = %s
        ); '''
        cursor.execute(sqlstring,(tabla,))       
        
        exists = cursor.fetchall()
        x=exists[0][0]
        if x:
           return True
        else:
            return False
        

    except (Exception, psycopg2.Error) as error:
        print("Error while connecting to PostgreSQL: ", error)
    finally:
        if connection:
            cursor.close()
            connection.close()         


def toPosgres():
    config = configparser.ConfigParser()
    e=dir_path()
    config.read(e)   

    #bd connection
    bd_user = config['db']['user']
    bd_password = config['db']['password']
    #bd_user = os.environ.get('bd_user')
    #bd_password = os.environ.get('bd_password')

    bd_host=config['db']['host']
    bd_port=config['db']['port']
    bd_database=config['db']['database']


    try:    
        connection = psycopg2.connect(
            user = bd_user,
            password = bd_password,
            host = bd_host,
            port = bd_port,
            database = bd_database
            )
        
        cursor = connection.cursor()  
        

        drop_users = ''' DROP TABLE IF EXISTS users; '''
        cursor.execute(drop_users)

        create_user = '''
        CREATE TABLE users (    
        id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        password VARCHAR(100) NOT NULL,
        isadmin BOOLEAN,
        activo BOOLEAN
        );
        '''
        cursor.execute(create_user)
        connection.commit()
        print('tabla creada')
    except (Exception, psycopg2.Error) as error:
        print("Error while connecting to PostgreSQL: ", error)
    finally:
        if connection:
            cursor.close()
            connection.close()
            print("PostgreSQL connection is closed")